package ${package}.controller;

import javax.validation.Valid;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springside.modules.utils.mapper.BeanMapper;
import org.springside.modules.utils.number.NumberUtil;

import com.github.pagehelper.PageInfo;
import ${package}.StatusCode;
import ${package}.domain.${className}DO;
import ${package}.domain.${className}DTO;
import ${package}.domain.${className}Query;
import ${package}.service.${className}Service;
import com.wlgroup.core.RestStatus;
import com.wlgroup.core.exception.BusinessException;
import com.wlgroup.core.domain.BaseQuery.Direction;
import com.wlgroup.core.model.response.ObjectCollectionResponse;
import com.wlgroup.core.model.response.ObjectDataResponse;

import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

@RestController
@RequestMapping(value = "/api/v1", produces = { MediaType.APPLICATION_JSON_UTF8_VALUE }, consumes = { MediaType.APPLICATION_JSON_UTF8_VALUE })
public class ${className}Controller {

	@Autowired
	private ${className}Service ${classname}Service;
	
	@ApiOperation(value = "根据ID获取${comments}", notes = "")
    @RequestMapping(value = "/${classname}s/{id}", method = RequestMethod.GET, consumes = MediaType.ALL_VALUE)
    public ObjectDataResponse<${className}DTO> get${className}(@ApiParam(value = "ID", required = true) @PathVariable String id) {

        ${className}DO ${classname}DO = ${classname}Service.get(id);
        if (${classname}DO == null) {
        	throw new BusinessException(RestStatus.DATA_NOT_EXISTS.code(), "日志不存在");
        }
        
        return new ObjectDataResponse<${className}DTO>(BeanMapper.map(${classname}DO,
            BeanMapper.getType(${className}DO.class), BeanMapper.getType(${className}DTO.class)));
    }
    
    @ApiOperation(value = "获取${comments}列表", notes = "")
    @ApiImplicitParams({ @ApiImplicitParam(name = "pageNum", value = "页码", required = false, example = "1", paramType = "query", dataType = "int", defaultValue = "1"),
                         @ApiImplicitParam(name = "pageSize", value = "单页返回的记录条数,如果未传则不分页", required = false, example = "40", paramType = "query", dataType = "int") })
    @RequestMapping(value = "/${classname}s", method = RequestMethod.GET, consumes = MediaType.ALL_VALUE)
    public ObjectCollectionResponse<${className}DTO> list${className}(@RequestParam(name = "pageNum", required = false, defaultValue = "1") Integer pageNum,
                                                            @RequestParam(name = "pageSize", required = false) Integer pageSize) {
        ${className}Query query = new ${className}Query();
        query.setShowFlag(isShow);
        query.addOrder(Direction.ASC, "id");

        if (pageSize != null) {
            if (pageNum <= 0) {
                pageNum = 1;
            }
            if (pageSize <= 0) {
                pageSize = 10;
            }

            query.setPage(pageNum);
            query.setSize(pageSize);

            PageInfo<${className}DO> page = ${classname}Service.page(query);
            return new ObjectCollectionResponse<${className}DTO>(BeanMapper.mapList(page.getList(),
                BeanMapper.getType(${className}DO.class), BeanMapper.getType(${className}DTO.class)),
                page.getTotal());
        } else {

            List<${className}DO> list = ${classname}Service.list(query);
            return new ObjectCollectionResponse<${className}DTO>(BeanMapper.mapList(list,
                BeanMapper.getType(${className}DO.class), BeanMapper.getType(${className}DTO.class)));
        }

    }
	
	
}
